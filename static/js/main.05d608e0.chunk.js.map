{"version":3,"sources":["layout/Header.js","layout/Footer.js","layout/MainLayout.js","pages/HomePage.js","layout/AdminLayout.js","pages/AdminPage.js","pages/ErrorPage.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","Footer","MainLayout","layout_Header","id","children","layout_Footer","HomePage","layout_MainLayout","React","Component","AdminLayout","AdminPage","layout_AdminLayout","ErrorPage","Boolean","window","location","hostname","match","App","BrowserRouter","Switch","Route","exact","path","component","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oOAYeA,EAVA,SAACC,GAEZ,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,sBCMOC,EAVA,SAACJ,GAEZ,OACEC,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,sBCWOE,EAbI,SAACL,GAClB,OACEC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAACG,EAAD,MACAL,EAAAC,EAAAC,cAAA,QAAMI,GAAG,WACNP,EAAMQ,UAETP,EAAAC,EAAAC,cAACM,EAAD,QCISC,mLATb,OACCT,EAAAC,EAAAC,cAACQ,EAAD,KACCV,EAAAC,EAAAC,cAAA,+BALmBS,IAAMC,WCUdC,EAXK,SAACd,GACnB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAMI,GAAG,WACRN,EAAAC,EAAAC,cAAA,wBACEH,EAAMQ,YCSAO,mLAVb,OACCd,EAAAC,EAAAC,cAACa,EAAD,KACCf,EAAAC,EAAAC,cAAA,gCALoBS,IAAMC,WCSfI,EAVG,SAACjB,GAEf,OACEC,EAAAC,EAAAC,cAACQ,EAAD,KACFV,EAAAC,EAAAC,cAAA,0BCKgBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,+DCPAC,mLAEF,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,aAAaC,UAAWnB,IAC1CT,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,oBAAoBC,UAAWd,IACjDd,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOG,UAAWZ,aAPVJ,aAiBlBiB,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SDiG3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.05d608e0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = (props) => {\n    \n    return (\n      <header>\n        <h1>Header</h1>\n      </header>\n    );\n}\n\n\nexport default Header;","import React from \"react\";\n\nconst Footer = (props) => {\n    \n    return (\n      <footer>\n        <h1>Footer</h1>\n      </footer>\n    );\n}\n\n\nexport default Footer;\n","import React from \"react\";\nimport Header from './Header.js';\nimport Footer from './Footer.js';\n\nconst MainLayout = (props) => {\n  return (\n    <div>\n    <p>Main Layout</p>\n      <Header/>\n      <main id=\"content\">\n        {props.children}\n      </main>\n      <Footer/>\n    </div>\n  );\n}\n\nexport default MainLayout;","import React from 'react';\nimport MainLayout from '../layout/MainLayout.js';\n\n\nclass HomePage extends React.Component {\n\n  render() {\n\t\treturn (\n\t\t\t<MainLayout>\n\t\t\t\t<h1>Home Page</h1>\n\t\t\t</MainLayout>\n\t  );\n  };\n    \n}\n\nexport default HomePage;\n\n","import React from \"react\";\nimport AdminPage from '../pages/AdminPage.js';\n\nconst AdminLayout = (props) => {\n  return (\n    <div>\n      <main id=\"content\">\n      \t<p>AdminLayout</p>\n        {props.children}\n      </main>\n    </div>\n  );\n}\n\nexport default AdminLayout;","import React from \"react\";\nimport AdminLayout from '../layout/AdminLayout.js';\n\n\nclass AdminPage extends React.Component {\n\n  render() {\n\t\treturn (\n\t\t\t<AdminLayout>\n\t\t\t\t<h1>Admin Page</h1>\n\t\t\t</AdminLayout>\n\t  );\n  };\n    \n}\n\n\nexport default AdminPage;","import React from \"react\";\nimport MainLayout from '../layout/MainLayout.js';\n\nconst ErrorPage = (props) => {\n    \n    return (\n      <MainLayout>\n\t\t\t\t<h1>Error Page</h1>\n\t\t\t</MainLayout>\n    );\n}\n\n\nexport default ErrorPage;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Header from './layout/Header.js';\nimport HomePage from './pages/HomePage.js';\nimport AdminPage from './pages/AdminPage.js';\nimport ErrorPage from './pages/ErrorPage.js';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/affiliate\" component={HomePage} />\n          <Route exact path=\"/affiliate/admin/\" component={AdminPage} />\n          <Route component={ErrorPage} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}